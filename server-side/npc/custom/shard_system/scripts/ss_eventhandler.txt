/**
 * Data provided by the listener function. Provides experience
 * to a shard then upgrades it when the experience threshold is
 * met. See the getNextExp() function for necessary experience.
 * @param {integer} shard_pos 
 * @param {integer} shard_exp 
 */
function	script	SSEventHandler	{
    // Local function declarations.
    function getBaseExp;
    function getNextExp;
    function upgradeShard;

    // Data definitions.
    .@shard_pos = getarg(0);
    .@shard_exp = getarg(1);
    .@shard_lvl = getequipweaponlv(.@shard_pos);

    // Update base experience and next experience.
    query_sql("UPDATE `shard_db` SET `base_exp` = `base_exp` + "+ getBaseExp(.@shard_exp) +" WHERE `unique_id` = "+ .@unique_id);
    query_sql("UPDATE `shard_db` SET `next_exp` = "+ getNextExp(.@shard_lvl) +" WHERE `unique_id` = "+ .@unique_id +" AND `next_exp` = 0");
    
    // Obtain base experience and next experience.
    query_sql("SELECT `base_exp`, `next_exp` FROM `shard_db` WHERE `unique_id` = "+ .@unique_id, .@base_exp, .@next_exp);

    // Compare base experience and next experience.
    // When base experience is higher than next experience,
    // upgrade the item.
    if(.@base_exp > .@next_exp) {
        .@temp_exp = .@next_exp - .@base_exp;
        upgradeShard(.@shard_pos, .@temp_exp);
    }

    // Success!
    return 0;


    // MAIN FUNCTIONS
    // ========================================================================
    /** 
     * Returns the last slain mob's total experience gained.
     * @param {integer} base_exp experience gained by killing a monster
     */
    function getBaseExp {
        // Calculate what percent of experience will be gained.
        .@base_exp = ((.@base_exp / 100) * $base_rate);

        // Boss-type monster kill bonus.
        if(getmonsterinfo(killedrid, MOB_MODE) & 32)
            .@base_exp += ((.@base_exp / 100) * $shard_boss_rate);
        
        // Reduced experience.
        return .@base_exp;
    }

    /**
     * Returns the experience necessary to level.
     * Scales up to level 99.
     * Formula: 5((n - 1)^3 + (n + 2)^2 + 99)^3
     * To level 2: 6,298,560
     * To level 3: 7,804,480
     * To level 4: 11,499,840
     * To level 5: 21,257,640
     * @param {integer} shard_lvl the equipped shard level
     */
    function getNextExp    {
        // Calculate the inner part of the equation.
        .@a = pow(getarg(0) - 1, 3);
        .@b = pow(getarg(0) + 2, 2);
        .@c = 99;

        // Complete the equation.
        return 5 * pow(.@a + .@b + .@c, 3);
    }

    /**
     * Upgrade the shard and provide player with the next level of the item.
     * @param {integer} item_pos the equipped item slot.
     * @param {integer} temp_exp temporary leftover exp.
     */
    function upgradeShard {
        // Gather information.
        query_sql("SELECT `unique_id` FROM `inventory` WHERE `char_id` = "+ getcharid(0) +" AND `equip` = "+ getarg(0), .@db_unique_id);
        query_sql("SELECT `id` FROM `shard_db` WHERE `unique_id` = "+ .@db_unique_id, .@db_primary_key);

        // Segment the 32-bit primary key.
        .@card2 = .@db_primary_key >> 16;
        .@card3 = .@db_primary_key & 65535;

        // Delete and obtain the new item.
        // Temporarily store the primary key.
        delequip getarg(0);
        getitem2 (getequipid(getarg(0)) + 1),1,1,0,0,-255,.@card2,.@card3,0;
		equip2 (getequipid(getarg(0)) + 1),0,0,-255,.@card2,.@card3,0;
		
        // Use the stored key to find the new item's unique ID.
        query_sql("SELECT `unique_id` FROM `inventory` WHERE `card0` = -255 AND `card1` = "+ .@card2 +" AND `card2` = "+ .@card3, .@db_unique_id);

        // Update new item information in shard_db table and remove temporary key information.
        query_sql("UPDATE `shard_db` SET `item_id` = `item_id` + 1, `level` = `level + 1, `base_exp` = "+ getarg(1) +", `next_exp` = "+ getNextExp(.@shard_lvl + 1) +", `unique_id` = "+ .@db_unique_id +" WHERE `id` = "+ .@db_primary_key);
        query_sql("UPDATE `inventory` SET `card1` = 0, `card2` = 0 WHERE `unique_id` = "+ .@db_unique_id);

        // Success!
        return 0;
    }
}